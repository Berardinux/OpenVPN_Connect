#!/usr/bin/env python3
##### --{"0"}-- #####

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Gdk
import subprocess
import os
import sys

class UiLayout(Gtk.Window):
    def __init__(self):
        Gtk.Window.__init__(self, title="OpenVPN")
        self.set_default_size(500, 800)
        self.set_position(Gtk.WindowPosition.CENTER_ALWAYS)
        self.set_resizable(False)
        fixed = Gtk.Fixed()
        self.add(fixed)
        
        image = Gtk.Image.new_from_file("/opt/OpenVPN/Images/ovpn_Profiles.jpeg")
        fixed.put(image, 0, 0)

        overlay = Gtk.Overlay()
        overlay.set_size_request(500, 800)
        fixed.put(overlay, 0, 0)

        button_image_settings = Gtk.Image.new_from_file("/opt/OpenVPN/Images/ovpn_settings.png")
        button_settings = Gtk.Button()
        button_settings.connect("clicked", self.on_settings_button_clicked)
        button_settings.add(button_image_settings)
        overlay.add_overlay(button_settings)
        overlay.set_overlay_pass_through(button_settings, True)
        button_settings.set_margin_start(20)
        button_settings.set_margin_top(20)
        button_settings.set_valign(Gtk.Align.START)
        button_settings.set_halign(Gtk.Align.START)

        button_image2 = Gtk.Image.new_from_file("/opt/OpenVPN/Images/ovpn_scroll.png")
        button2 = Gtk.Button()
        button2.connect("clicked", self.on_button2_clicked)
        button2.add(button_image2)
        overlay.add_overlay(button2)
        overlay.set_overlay_pass_through(button2, True)
        button2.set_margin_end(20)
        button2.set_margin_top(20)
        button2.set_valign(Gtk.Align.START)
        button2.set_halign(Gtk.Align.END)

        button_image3 = Gtk.Image.new_from_file("/opt/OpenVPN/Images/ovpn_plus.png")
        button3 = Gtk.Button()
        button3.connect("clicked", self.on_button3_clicked)
        button3.add(button_image3)
        overlay.add_overlay(button3)
        overlay.set_overlay_pass_through(button3, True)
        button3.set_margin_end(20)
        button3.set_margin_bottom(20)
        button3.set_valign(Gtk.Align.END)
        button3.set_halign(Gtk.Align.END)

##############################################################################

        # Create the main box to hold the switches
        switch_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=20)
        self.switches = []
        self.command_switch_1_on = self.run_command_switch_on
        self.command_switch_1_off = self.run_command_switch_off
        self.create_switches(switch_box)
        overlay.add_overlay(switch_box)
        switch_box.set_valign(Gtk.Align.CENTER)
        switch_box.set_halign(Gtk.Align.CENTER)
        self.show_all()
    
    def create_switches(self, switch_box):
        switch_configs = [
############## ///\\\ -{"START"}- ///\\\ ##############

############## ///\\\ --{"END"}-- ///\\\ ##############
        ]

        for config in switch_configs:
            switch_with_label_button = self.create_switch_with_label_button(config["label"], config["command_trash_button"])
            switch_box.pack_start(switch_with_label_button, False, False, 0)
            self.switches.append(switch_with_label_button.get_children()[0])
            switch_with_label_button.get_children()[0].connect("notify::active", self.on_switch_clicked, config)

# Command functions for Switch 1
    def run_command_switch_on(self, switch_config):
        try:
            command_on = switch_config["command_switch_on"]
            subprocess.Popen(command_on)
            return True
        except Exception:
            return False

    def run_command_switch_off(self, switch_config):
        try:
            command_off = switch_config["command_switch_off"]
            subprocess.run(command_off)
            return True
        except Exception:
            return False
        
    def on_switch_clicked(self, switch, gparam, config):
        if switch.get_active():
            for s in self.switches:
                if s != switch and s.get_active():
                    s.set_active(False)

            if config["command_on"](config):
                print(f"{config['label']} turned ON successfully!")
            else:
                print(f"Error turning {config['label']} ON.")
        else:
            if config["command_off"](config):
                print(f"{config['label']} turned OFF successfully!")
            else:
                print(f"Error turning {config['label']} OFF.")

    def create_switch_with_label_button(self, label_text, trash_button_config):
        switch_with_label_button = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=10)
        switch = Gtk.Switch()
        image = Gtk.Image.new_from_file("/opt/OpenVPN/Images/ovpn_trash.png")
        label = Gtk.Label(label=label_text)
        trash_button = Gtk.Button()
        trash_button.set_image(image)
        trash_button.connect("clicked", self.on_trash_button_clicked, trash_button_config)

        image_and_label_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        image_and_label_box.pack_start(image, False, False, 0)
        image_and_label_box.pack_start(label, False, False, 0)

        switch_with_label_button.pack_start(switch, False, False, 0)
        switch_with_label_button.pack_start(trash_button, False, False, 0)
        switch_with_label_button.pack_start(image_and_label_box, False, False, 0)

        return switch_with_label_button

    def restart_application(self):
        self.destroy()
        python_executable = sys.executable
        script_path = os.path.abspath(__file__)
        os.execl(python_executable, python_executable, script_path)

    def on_trash_button_clicked(self, button, trash_button_config):
        try:
            result = subprocess.run(trash_button_config, capture_output=True, text=True)
            if result.returncode == 0:
                print(f"{trash_button_config} executed successfully!")
                self.restart_application()
            else:
                print(f"Error executing {trash_button_config}.\nError Output: {result.stderr}")
        except Exception as e:
            print("Error executing the command:", e)


##############################################################################

    def show_error_dialog(self, message):
        dialog = Gtk.MessageDialog(
            parent=self,
            flags=0,
            message_type=Gtk.MessageType.ERROR,
            buttons=Gtk.ButtonsType.OK,
            text=message,
        )
        dialog.run()
        dialog.destroy()

##############################################################################
############################# SETTINGS WINDOW ################################
##############################################################################
    def on_settings_back_to_main_clicked(self, button, settings_window):
        settings_window.hide()
        self.show_all()

    def on_settings_button_clicked(self, button):
        settings_window = Gtk.Window(title="Settings")
        settings_window.set_default_size(500, 800)
        settings_window.set_position(Gtk.WindowPosition.CENTER_ON_PARENT)
        settings_window.set_transient_for(self)
        settings_window.set_resizable(False)

        overlay = Gtk.Overlay()
        settings_window.add(overlay)

        settings_image = Gtk.Image.new_from_file("/opt/OpenVPN/Images/ovpn_settings.jpeg")
        overlay.add(settings_image)
        
        fixed = Gtk.Fixed()
        overlay.add_overlay(fixed)

        back_button_image = Gtk.Image.new_from_file("/opt/OpenVPN/Images/ovpn_arrow.png")
        back_button = Gtk.Button()
        back_button.add(back_button_image)
        overlay.add_overlay(back_button)
        overlay.set_overlay_pass_through(back_button, True)
        back_button.set_margin_start(20)
        back_button.set_margin_top(20)
        back_button.set_valign(Gtk.Align.START)
        back_button.set_halign(Gtk.Align.START)
        back_button.connect("clicked", self.on_settings_back_to_main_clicked, settings_window)

        settings_window.connect("destroy", Gtk.main_quit)
        settings_window.show_all()
        self.hide()

##############################################################################
############################### LOGS WINDOW ##################################
##############################################################################
    def on_logs_back_to_main_clicked(self, button, logs_window):
        logs_window.hide()
        self.show_all()
    
    def get_logs_output(self):
        result = subprocess.run(['cat', '/opt/OpenVPN/config/vpn.log'], capture_output=True, text=True)
        return result.stdout.strip() if result.stdout else ""

    def on_button2_clicked(self, button):
        logs_window = Gtk.Window(title="Logs")
        logs_window.set_default_size(500, 800)
        logs_window.set_position(Gtk.WindowPosition.CENTER_ON_PARENT)
        logs_window.set_transient_for(self)
        logs_window.set_resizable(False)

        overlay = Gtk.Overlay()
        logs_window.add(overlay)

        logs_image = Gtk.Image.new_from_file("/opt/OpenVPN/Images/ovpn_logs.jpeg")
        overlay.add_overlay(logs_image)

        scrolled_window = Gtk.ScrolledWindow()
        scrolled_window.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
        overlay.add_overlay(scrolled_window)

        fixed = Gtk.Fixed()
        scrolled_window.add(fixed)

        button_image = Gtk.Image.new_from_file("/opt/OpenVPN/Images/ovpn_arrow.png")
        button = Gtk.Button()
        button.connect("clicked", self.on_logs_back_to_main_clicked, logs_window)
        button.add(button_image)
        overlay.add_overlay(button)
        overlay.set_overlay_pass_through(button, True)
        button.set_margin_start(20)
        button.set_margin_top(20)
        button.set_valign(Gtk.Align.START)
        button.set_halign(Gtk.Align.START)

        logs_output = self.get_logs_output()
        logs_label = Gtk.Label()
        logs_label.set_text(logs_output)
        logs_label.set_line_wrap(True)
        logs_label.set_width_chars(50)
        
        logs_label_x = 100
        logs_label_y = 100
        fixed.put(logs_label, logs_label_x, logs_label_y)

        logs_window.connect("destroy", Gtk.main_quit)
        logs_window.show_all()
        self.hide()

    def on_back_to_main_clicked(self, button, logs_window):
        logs_window.hide()
        self.show_all()

##############################################################################
############################### ADD WINDOW ##################################
##############################################################################

    def on_button3_clicked(self, button):
        add_window = Gtk.Window(title="ADD")
        add_window.set_default_size(500, 800)
        add_window.set_position(Gtk.WindowPosition.CENTER_ON_PARENT)
        add_window.set_transient_for(self)
        add_window.set_resizable(False)

        overlay = Gtk.Overlay()
        add_window.add(overlay)

        add_image = Gtk.Image.new_from_file("/opt/OpenVPN/Images/ovpn_Import.jpeg")
        overlay.add(add_image)

        fixed = Gtk.Fixed()
        overlay.add_overlay(fixed)

        button_image = Gtk.Image.new_from_file("/opt/OpenVPN/Images/ovpn_arrow.png")
        button = Gtk.Button()
        button.connect("clicked", self.on_back_to_main_clicked, add_window)
        button.add(button_image)
        overlay.add_overlay(button)
        overlay.set_overlay_pass_through(button, True)
        button.set_margin_start(20)
        button.set_margin_top(20)
        button.set_valign(Gtk.Align.START)
        button.set_halign(Gtk.Align.START)

        add_button_image2 = Gtk.Image.new_from_file("/opt/OpenVPN/Images/ovpn_browse.png")
        add_button = Gtk.Button()
        add_button.connect("clicked", self.on_add_button_clicked, add_window)
        add_button.add(add_button_image2)
        overlay.add_overlay(add_button)
        overlay.set_overlay_pass_through(add_button, True)
        add_button.set_margin_end(20)
        add_button.set_margin_top(20)
        add_button.set_valign(Gtk.Align.CENTER)
        add_button.set_halign(Gtk.Align.CENTER)
        add_button.set_margin_top(350)
        add_button.set_margin_start(20)

        add_window.connect("destroy", Gtk.main_quit)
        add_window.show_all()
        self.hide()

    def on_add_button_clicked(self, button, add_window):
        dialog = Gtk.FileChooserDialog(
            title="Select your .ovpn file",
            parent=self,
            action=Gtk.FileChooserAction.OPEN,
        )
        dialog.add_buttons(
            Gtk.STOCK_CANCEL,
            Gtk.ResponseType.CANCEL,
            Gtk.STOCK_OPEN,
            Gtk.ResponseType.OK,
        )
        response = dialog.run()
        if response == Gtk.ResponseType.OK:
            selected_file_path = dialog.get_filename()
            print("You clicked the OK button")
            print("File selected: " + selected_file_path)
            
            try:
                script_path = "/opt/OpenVPN/scripts/add.sh"
                command = ["pkexec", "bash", script_path, selected_file_path]
                subprocess.run(command, check=True)
                self.show_error_dialog("Bash script executed successfully!")
                self.restart_application()
            except FileNotFoundError:
                self.show_error_dialog("Error: File not found.")
            except PermissionError:
                self.show_error_dialog("Error: Permission denied. Make sure you have administrative privileges.")
            except Exception as e:
                self.show_error_dialog("Error: An error occurred while running the bash script.")
        elif response == Gtk.ResponseType.CANCEL:
            self.show_error_dialog("User didn't choose any file")
        dialog.destroy()

def css():
    css_provider = Gtk.CssProvider()
    css_provider.load_from_path("/opt/OpenVPN/styles.css")
    context = Gtk.StyleContext()
    screen = Gdk.Screen.get_default()
    context.add_provider_for_screen(screen, css_provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)

if __name__ == "__main__":
    css()
    ui_layout = UiLayout()
    ui_layout.connect("destroy", Gtk.main_quit)
    ui_layout.show_all()
    Gtk.main()
