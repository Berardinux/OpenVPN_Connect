#!/usr/bin/env python3

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Gdk
import subprocess

class UiLayout(Gtk.Window):
    def __init__(self):
        Gtk.Window.__init__(self, title="OpenVPN")
        self.set_default_size(500, 800)
        self.set_position(Gtk.WindowPosition.CENTER_ALWAYS)
        self.set_resizable(False)
        fixed = Gtk.Fixed()
        self.add(fixed)
        
        image = Gtk.Image.new_from_file("Images/ovpn_Profiles.jpeg")
        fixed.put(image, 0, 0)

        overlay = Gtk.Overlay()
        overlay.set_size_request(500, 800)
        fixed.put(overlay, 0, 0)

        button_image = Gtk.Image.new_from_file("Images/ovpn_settings.png")
        button = Gtk.Button()
        button.connect("clicked", self.on_settings_button_clicked)
        button.add(button_image)
        overlay.add_overlay(button)
        overlay.set_overlay_pass_through(button, True)
        button.set_margin_left(20)
        button.set_margin_top(20)
        button.set_valign(Gtk.Align.START)
        button.set_halign(Gtk.Align.START)

        button_image2 = Gtk.Image.new_from_file("Images/ovpn_scroll.png")
        button2 = Gtk.Button()
        button2.connect("clicked", self.on_button2_clicked)
        button2.add(button_image2)
        overlay.add_overlay(button2)
        overlay.set_overlay_pass_through(button2, True)
        button2.set_margin_right(20)
        button2.set_margin_top(20)
        button2.set_valign(Gtk.Align.START)
        button2.set_halign(Gtk.Align.END)

        button_image3 = Gtk.Image.new_from_file("Images/ovpn_plus.png")
        button3 = Gtk.Button()
        button3.connect("clicked", self.on_button3_clicked)
        button3.add(button_image3)
        overlay.add_overlay(button3)
        overlay.set_overlay_pass_through(button3, True)
        button3.set_margin_right(20)
        button3.set_margin_bottom(20)
        button3.set_valign(Gtk.Align.END)
        button3.set_halign(Gtk.Align.END)

    def css():
        css_provider = Gtk.CssProvider()
        css_provider.load_from_path("styles.css")

        context = Gtk.StyleContext()
        screen = Gdk.Screen.get_default()
        context.add_provider_for_screen(screen, css_provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)

        ui_layout = UiLayout()
        ui_layout.connect("destroy", Gtk.main_quit)
        ui_layout.show_all()
        Gtk.css()

        if __name__ == "__main__":
            css()

##############################################################################
############################# SETTINGS WINDOW ################################
##############################################################################

    def on_settings_button_clicked(self, button):
        settings_window = Gtk.Window(title="Settings")
        settings_window.set_default_size(500, 800)
        settings_window.set_position(Gtk.WindowPosition.CENTER_ON_PARENT)
        settings_window.set_transient_for(self)
        settings_window.set_resizable(False)

        overlay = Gtk.Overlay()
        settings_window.add(overlay)
        
        settings_image = Gtk.Image.new_from_file("Images/ovpn_settings.jpeg")
        overlay.add(settings_image)
        
        fixed = Gtk.Fixed()
        overlay.add_overlay(fixed)

        button_image = Gtk.Image.new_from_file("Images/ovpn_arrow.png")  # Replace with the path to your button image
        button = Gtk.Button()
        button.connect("clicked", self.on_back_to_main_clicked, settings_window)
        button.add(button_image)
        overlay.add_overlay(button)
        overlay.set_overlay_pass_through(button, True)
        button.set_margin_left(20)
        button.set_margin_top(20)
        button.set_valign(Gtk.Align.START)
        button.set_halign(Gtk.Align.START)

        settings_window.connect("destroy", Gtk.main_quit)

        settings_window.show_all()

        self.hide()

    def on_back_to_main_clicked(self, button, settings_window):
        settings_window.hide()
        self.show_all()

##############################################################################
############################### LOGS WINDOW ##################################
##############################################################################
    def get_logs_output(self):
        result = subprocess.run(['journalctl', '-u', 'openvpn.service'], capture_output=True, text=True)
        return result.stdout.strip() if result.stdout else ""

    def on_button2_clicked(self, button):
        logs_window = Gtk.Window(title="Logs")
        logs_window.set_default_size(500, 800)
        logs_window.set_position(Gtk.WindowPosition.CENTER_ON_PARENT)
        logs_window.set_transient_for(self)
        logs_window.set_resizable(False)

        overlay = Gtk.Overlay()
        logs_window.add(overlay)

        logs_image = Gtk.Image.new_from_file("Images/ovpn_logs.jpeg")
        overlay.add(logs_image)

        fixed = Gtk.Fixed()
        overlay.add_overlay(fixed)

        button_image = Gtk.Image.new_from_file("Images/ovpn_arrow.png")
        button = Gtk.Button()
        button.connect("clicked", self.on_back_to_main_clicked, logs_window)
        button.add(button_image)
        overlay.add_overlay(button)
        overlay.set_overlay_pass_through(button, True)
        button.set_margin_left(20)
        button.set_margin_top(20)
        button.set_valign(Gtk.Align.START)
        button.set_halign(Gtk.Align.START)

        logs_output = self.get_logs_output()
        logs_label = Gtk.Label()
        logs_label.set_text(logs_output)
        logs_label.set_size_request(400,700)
        fixed.put(logs_label, 50, 50)

        logs_window.connect("destroy", Gtk.main_quit)

        logs_window.show_all()

        self.hide()

    def on_back_to_main_clicked(self, button, logs_window):
        logs_window.hide()
        self.show_all()

##############################################################################
############################### ADD WINDOW ##################################
##############################################################################

    def on_button3_clicked(self, button):
        add_window = Gtk.Window(title="ADD")
        add_window.set_default_size(500, 800)
        add_window.set_position(Gtk.WindowPosition.CENTER_ON_PARENT)
        add_window.set_transient_for(self)
        add_window.set_resizable(False)

        overlay = Gtk.Overlay()
        add_window.add(overlay)

        add_image = Gtk.Image.new_from_file("Images/ovpn_Import.jpeg")
        overlay.add(add_image)

        fixed = Gtk.Fixed()
        overlay.add_overlay(fixed)

        button_image = Gtk.Image.new_from_file("Images/ovpn_arrow.png")
        button = Gtk.Button()
        button.connect("clicked", self.on_back_to_main_clicked, add_window)
        button.add(button_image)
        overlay.add_overlay(button)
        overlay.set_overlay_pass_through(button, True)
        button.set_margin_left(20)
        button.set_margin_top(20)
        button.set_valign(Gtk.Align.START)
        button.set_halign(Gtk.Align.START)

        add_button_image2 = Gtk.Image.new_from_file("Images/ovpn_browse.png")
        add_button = Gtk.Button()
        add_button.connect("clicked", self.on_add_button_clicked, add_window)  # Pass add_window as an argument
        add_button.add(add_button_image2)
        overlay.add_overlay(add_button)
        overlay.set_overlay_pass_through(add_button, True)
        add_button.set_margin_right(20)
        add_button.set_margin_top(20)
        add_button.set_valign(Gtk.Align.CENTER)
        add_button.set_halign(Gtk.Align.CENTER)
        add_button.set_margin_top(350)
        add_button.set_margin_left(20)

        add_window.connect("destroy", Gtk.main_quit)

        add_window.show_all()

        self.hide()

    def on_add_button_clicked(self, button, add_window):
        dialog = Gtk.FileChooserDialog("Select a file Hoss", self, Gtk.FileChooserAction.OPEN,
                                        ("Cancel", Gtk.ResponseType.CANCEL,
                                        "Ok", Gtk.ResponseType.OK))
        response = dialog.run()

        if response == Gtk.ResponseType.OK:
            print("You clicked the OK button")
            print("File selected" + dialog.get_filename())
        elif response == Gtk.ResponseType.CANCEL:
            print("User didn't choose any file")
        dialog.destroy()

ui_layout = UiLayout()
ui_layout.connect("destroy", Gtk.main_quit)
ui_layout.show_all()
Gtk.main()
